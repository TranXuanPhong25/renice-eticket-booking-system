import { Container } from "@andrew/components/Container";
import { SeatMapPreview } from "@andrew/components/SeatMapPreview";
import { mockupEventDetail } from "@andrew/mockups/event.mockup";
import { getMaxMinPrice } from "@andrew/utils/event.utils";
import { Button, Image, Tag, Card, Divider, Avatar, Badge, Breadcrumb } from "antd";
import {
  IoCalendar,
  IoLocationOutline,
  IoPricetag,
  IoTimeOutline,
  IoPersonOutline,
  IoTicketOutline,
  IoShareSocialOutline,
  IoHeartOutline,
  IoStarOutline,
  IoHomeOutline,
  IoChevronForwardOutline
} from "react-icons/io5";
import { FaFacebook, FaYoutube, FaTwitter, FaInstagram } from "react-icons/fa";

const EventBasicInformation = (props: any) => {
  const { data } = props;

  return (
    <div className="flex flex-col gap-4">
      {data.map((item: any, index: number) => (
        <div key={index} className="flex gap-3 items-start">
          <span className="text-blue-400 mt-1">{item.icon}</span>
          <div className="text-lg text-gray-100">{item.value}</div>
        </div>
      ))}
    </div>
  );
};

const EventStats = () => {
  return (
    <div className="flex gap-6 items-center text-gray-300">
      <div className="flex items-center gap-2">
        <IoHeartOutline size={20} />
        <span>1.2k quan tâm</span>
      </div>
      <div className="flex items-center gap-2">
        <IoShareSocialOutline size={20} />
        <span>Chia sẻ</span>
      </div>
      <div className="flex items-center gap-2">
        <IoStarOutline size={20} />
        <span>4.8 (128 đánh giá)</span>
      </div>
    </div>
  );
};

const SocialLinks = ({ socials }: { socials: any }) => {
  return (
    <div className="flex gap-3 mt-4">
      {socials.facebook && (
        <a href={socials.facebook} target="_blank" rel="noopener noreferrer"
          className="text-blue-400 hover:text-blue-300 transition-colors">
          <FaFacebook size={24} />
        </a>
      )}
      {socials.youtube && (
        <a href={socials.youtube} target="_blank" rel="noopener noreferrer"
          className="text-red-400 hover:text-red-300 transition-colors">
          <FaYoutube size={24} />
        </a>
      )}
    </div>
  );
};

const ArtistSection = ({ artists, hosts }: { artists: any[], hosts: any[] }) => {
  return (
    <div className="bg-white rounded-xl p-6 shadow-sm">
      <h3 className="text-xl font-semibold mb-4 text-gray-800">Nghệ sĩ tham gia</h3>
      <div className="flex flex-wrap gap-4 mb-6">
        {artists.map((artist, index) => (
          <div key={index} className="flex items-center gap-3 bg-gray-50 rounded-lg p-3">
            <Avatar size={48} src={artist.image} icon={<IoPersonOutline />} />
            <span className="font-medium text-gray-700">{artist.name}</span>
          </div>
        ))}
      </div>

      {hosts.length > 0 && (
        <>
          <h4 className="text-lg font-medium mb-3 text-gray-700">Đơn vị tổ chức</h4>
          <div className="flex flex-wrap gap-3">
            {hosts.map((host, index) => (
              <div key={index} className="flex items-center gap-2 bg-blue-50 rounded-lg p-2">
                <Avatar size={32} src={host.image} icon={<IoPersonOutline />} />
                <span className="text-gray-600">{host.name}</span>
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
};

const TicketPricing = ({ seats }: { seats: any[] }) => {
  return (
    <div className="bg-white rounded-xl p-6 shadow-sm">
      <h3 className="text-xl font-semibold mb-4 text-gray-800">Bảng giá vé</h3>
      <div className="space-y-3">
        {seats.map((seat) => (
          <div key={seat.id} className="flex justify-between items-center p-3 border rounded-lg">
            <div className="flex items-center gap-3">
              <div
                className="w-4 h-4 rounded-full"
                style={{ backgroundColor: seat.color }}
              ></div>
              <span className="font-medium text-gray-700">{seat.name}</span>
              <Badge
                status={seat.status === 'available' ? 'success' : seat.status === 'out' ? 'error' : 'warning'}
                text={seat.status === 'available' ? 'Còn vé' : seat.status === 'out' ? 'Hết vé' : 'Sắp hết'}
              />
            </div>
            <div className="text-lg font-semibold text-blue-600">
              {seat.price.toLocaleString('vi-VN')} VNĐ
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

const EventHighlights = () => {
  const highlights = [
    "Âm thanh và ánh sáng chuyên nghiệp",
    "Hệ thống bảo mật an toàn",
    "Dịch vụ khách hàng 24/7",
    "Hoàn tiền 100% nếu sự kiện bị hủy"
  ];

  return (
    <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6">
      <h3 className="text-xl font-semibold mb-4 text-gray-800">Điểm nổi bật</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
        {highlights.map((highlight, index) => (
          <div key={index} className="flex items-center gap-2">
            <IoTicketOutline className="text-blue-500 flex-shrink-0" size={16} />
            <span className="text-gray-700 text-sm">{highlight}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

const EventCountdown = ({ date }: { date: string }) => {
  return (
    <div className="bg-gradient-to-r from-orange-100 to-red-100 rounded-xl p-4 ">
      <h4 className="font-semibold text-gray-800 mb-2">Thời gian còn lại</h4>
      <div className="flex gap-4 text-center">
        <div className="bg-white rounded-lg p-2 min-w-[60px]">
          <div className="text-2xl font-bold text-red-500">15</div>
          <div className="text-xs text-gray-600">Ngày</div>
        </div>
        <div className="bg-white rounded-lg p-2 min-w-[60px]">
          <div className="text-2xl font-bold text-red-500">08</div>
          <div className="text-xs text-gray-600">Giờ</div>
        </div>
        <div className="bg-white rounded-lg p-2 min-w-[60px]">
          <div className="text-2xl font-bold text-red-500">23</div>
          <div className="text-xs text-gray-600">Phút</div>
        </div>
      </div>
    </div>
  );
};

const StickyBookingBar = ({ slug, priceRange }: { slug: string, priceRange: any }) => {
  return (
    <div className="sticky bottom-0 bg-white border-t shadow-lg p-4 z-50 lg:hidden">
      <div className="flex items-center justify-between">
        <div>
          <div className="text-sm text-gray-600">Giá từ</div>
          <div className="text-lg font-bold text-blue-600">
            {priceRange.minPrice.toLocaleString('vi-VN')} VNĐ
          </div>
        </div>
        <Button
          type="primary"
          href={`/${slug}/buy`}
          size="large"
          className="bg-gradient-to-r from-blue-500 to-purple-600 border-none"
          icon={<IoTicketOutline />}
        >
          Mua vé ngay
        </Button>
      </div>
    </div>
  );
};

export default async function EventDetailPage({
  params,
}: {
  params: Promise<{ slug: string }>;
}) {
  const { slug } = await params;

  const priceRange = getMaxMinPrice(mockupEventDetail.seats);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Breadcrumb */}
      <div className="bg-white border-b">
        <Container>
          <div className="py-3">
            <Breadcrumb
              items={[
                {
                  href: '/',
                  title: (
                    <div className="flex items-center gap-1">
                      <IoHomeOutline />
                      <span>Trang chủ</span>
                    </div>
                  ),
                },
                {
                  href: '/events',
                  title: 'Sự kiện',
                },
                {
                  title: mockupEventDetail.name,
                },
              ]}
            />
          </div>
        </Container>
      </div>

      {/* Hero Section */}
      <section className="bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900">
        <Container>
          <div className="grid lg:grid-cols-2 gap-8 py-8 lg:py-12">
            {/* Event Image */}
            <div className="space-y-4">
              <div className="relative">
                <Image
                  preview={false}
                  className="rounded-2xl overflow-hidden shadow-2xl w-full"
                  src={mockupEventDetail.image}
                  alt={mockupEventDetail.name}
                />
                <div className="absolute top-4 left-4">
                  <Tag color="green" className="text-sm font-semibold">
                    {mockupEventDetail.status}
                  </Tag>
                </div>
              </div>

              <Button
                type="primary"
                href={`/${slug}/buy`}
                size="large"
                className="w-full h-12 lg:h-14 text-base lg:text-lg font-semibold bg-gradient-to-r from-blue-500 to-purple-600 border-none hover:from-blue-600 hover:to-purple-700"
                icon={<IoTicketOutline size={20} />}
              >
                MUA VÉ NGAY - Từ {priceRange.minPrice.toLocaleString('vi-VN')} VNĐ
              </Button>
            </div>

            {/* Event Details */}
            <div className="text-white space-y-6">
              <div>
                <div className="flex flex-wrap items-center gap-2 mb-3">
                  <Tag color="blue">{mockupEventDetail.type.toUpperCase()}</Tag>
                  <Tag color="orange">HOT</Tag>
                  <Tag color="red">GIỚI HẠN SỐ LƯỢNG</Tag>
                </div>
                <h1 className="text-2xl lg:text-3xl xl:text-4xl font-bold leading-tight mb-4">
                  {mockupEventDetail.name}
                </h1>
                <EventStats />
              </div>

              <EventBasicInformation
                data={[
                  {
                    icon: <IoCalendar size={24} />,
                    value: `${mockupEventDetail.startedDate} - 20:00`,
                  },
                  {
                    icon: <IoLocationOutline size={24} />,
                    value: mockupEventDetail.address,
                  },
                  {
                    icon: <IoPricetag size={24} />,
                    value: `Từ ${priceRange.minPrice.toLocaleString('vi-VN')} VNĐ đến ${priceRange.maxPrice.toLocaleString('vi-VN')} VNĐ`,
                  },
                  {
                    icon: <IoTimeOutline size={24} />,
                    value: "Thời gian: 3 tiếng (có giải lao 15 phút)",
                  },
                  {
                    icon: <IoPersonOutline size={24} />,
                    value: `Tối đa ${mockupEventDetail.maxBuy} vé/người mua`,
                  },
                ]}
              />

              <SocialLinks socials={mockupEventDetail.socials} />
            </div>
          </div>
        </Container>
      </section>

      {/* Content Sections */}
      <Container>
        <div className="py-12 space-y-8">
          {/* Event Description */}
          <Card className="shadow-sm">
            <h2 className="text-2xl font-semibold mb-4 text-gray-800">Giới thiệu sự kiện</h2>
            <div className="prose max-w-none text-gray-600 leading-relaxed">
              <p>{mockupEventDetail.description}</p>
              <p>
                Đây là một sự kiện âm nhạc đặc biệt không thể bỏ lỡ trong năm 2025.
                Với sự tham gia của những nghệ sĩ hàng đầu, hệ thống âm thanh và ánh sáng
                chuyên nghiệp, chúng tôi cam kết mang đến cho khán giả một trải nghiệm
                âm nhạc tuyệt vời nhất.
              </p>
              <p>
                Sự kiện sẽ diễn ra tại {mockupEventDetail.address}, một trong những
                địa điểm tổ chức sự kiện uy tín và chuyên nghiệp nhất tại Hà Nội.
              </p>
            </div>
          </Card>

          {/* Seat Map Preview - NEW SECTION */}
          <SeatMapPreview seats={mockupEventDetail.seats} />

          <div className="grid lg:grid-cols-2 gap-8">
            {/* Artists & Hosts */}
            <ArtistSection
              artists={mockupEventDetail.artists}
              hosts={mockupEventDetail.hosts}
            />

            {/* Event Highlights */}
            <EventHighlights />
          </div>

          {/* Ticket Pricing */}
          <TicketPricing seats={mockupEventDetail.seats} />

          {/* Important Information */}
          <Card className="bg-yellow-50 border-yellow-200">
            <h3 className="text-xl font-semibold mb-4 text-gray-800 flex items-center gap-2">
              <IoTimeOutline className="text-yellow-600" />
              Thông tin quan trọng
            </h3>
            <div className="space-y-2 text-gray-700">
              <p>• Vé đã mua không được hoàn trả, đổi trả trừ trường hợp sự kiện bị hủy</p>
              <p>• Khán giả vui lòng có mặt trước 30 phút để làm thủ tục vào cổng</p>
              <p>• Không được mang thức ăn, đồ uống từ bên ngoài vào venue</p>
              <p>• Trẻ em dưới 6 tuổi không được vào xem</p>
              <p>• Nghiêm cấm quay phim, chụp ảnh trong suốt chương trình</p>
            </div>
          </Card>

          {/* Contact & Support */}
          <Card>
            <h3 className="text-xl font-semibold mb-4 text-gray-800">Liên hệ & Hỗ trợ</h3>
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold text-gray-700 mb-2">Hotline hỗ trợ</h4>
                <p className="text-blue-600 font-medium">1900 1234</p>
                <p className="text-gray-600 text-sm">Hoạt động 24/7</p>
              </div>
              <div>
                <h4 className="font-semibold text-gray-700 mb-2">Email</h4>
                <p className="text-blue-600">support@eticket.vn</p>
                <p className="text-gray-600 text-sm">Phản hồi trong 2 giờ</p>
              </div>
            </div>
          </Card>
        </div>
      </Container>

      {/* Sticky Booking Bar */}
      <StickyBookingBar slug={slug} priceRange={priceRange} />
    </div>
  );
}
